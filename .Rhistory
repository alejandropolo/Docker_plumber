return (c(m,v))
}
#Check the function
bootMeanVar.fn(y, 1:100)
bootMeanVar.fn(y, 1:1) # variance ??
bootMeanVar.fn(y, 1:1) # variance ??
# Produce R bootstrap estimates for the mean and the variance of y
bb = boot(y, bootMeanVar.fn,R=10000)
View(bb)
bb
View(bb)
bb$t0
bb$t[,1]
sd(bb$t[,1])
varMean_Boot = var(coefsdf$Mean)
varMean_Theo = varSample / sampleSize
bias = meanSample -  mean(coefsdf$Mean)   #  <------------------
std_error = sd(coefsdf$Mean)
coefsdf = data.frame(bb$t)
colnames(coefsdf)<- c("Mean","Var")
ggpairs(coefsdf)
library(GGally)
# Empirical joint distribution of estimators
coefsdf = data.frame(bb$t)
colnames(coefsdf)<- c("Mean","Var")
ggpairs(coefsdf)
var(bb$t[,2])
var(bb$t[,1])
minsample=min(x)
maxsample=max(y)
rangesample=maxsample-minsample
minsample=min(y)
maxsample=max(y)
rangesample=maxsample-minsample
# dataset
set.seed(150) #For replication
sampleSize = 5000;
y<- 10 + rnorm (sampleSize, mean=0.0, sd=2.0); # normal N(0,2)
# estimates from the sample
minSample = min(y)
maxSample = max(y)
rangeSample = maxSample - minSample
bootMinMax.fn=function (data ,index){
mm = min(data[index])
MM = max(data[index])
difMMmm = MM - mm
return (c(mm,MM, difMMmm))
}
#Check the function
bootMinMax.fn(y, 1:100)
bootMinMax.fn(y, 1:10)
# Produce R bootstrap estimates for the mean and the variance of y
bb = boot(y, bootMinMax.fn,R=1000)
hist(bb$t[,1],40, main = 'Mininum distribution')
hist(bb$t[,2],40, main = 'Maximum distribution')
hist(bb$t[,3],40, main = 'Range distribution')
# Empirical joint distribution of estimators
coefsdf = data.frame(bb$t)
colnames(coefsdf)<- c("Min","Max", "Range")
ggpairs(coefsdf)
# sample
x <-runif(sampleSize,0,1);
y <- 1  + 5 * x + rnorm (sampleSize, mean=0, sd=3.0);
# -------------------------------------------------------------------------------
# LINEAR REGRESSION ESTIMATION --------------------------------------------------
# -------------------------------------------------------------------------------
set.seed(150) #For replication
sampleSize = 100;
# sample
x <-runif(sampleSize,0,1);
y <- 1  + 5 * x + rnorm (sampleSize, mean=0, sd=3.0);
SSample = data.frame(x,y)
ggpairs(SSample)
bootBetasLM.fn=function (data ,index){
return (coef(lm("y~x", data=data[index,])))
}
#Check the function
bootBetasLM.fn(SSample, 1:10)
summary(lm("y~x", data=SSample ,subset =1:10))$coefficients
# Produce R = 10000 bootstrap estimates for beta0 and beta1
bb = boot(SSample, bootBetasLM.fn,R=10000)
#original (using the full sample)
coef_original <- coef(lm("y~x", data=SSample))
(install.packages("syuzhet"))
find.package('dyplr')
find.package('dplyr')
for(i in range(1,10)){
primt(i)
}
for(i in range(1,10)){
print(i)
}
for(i in c(1:10)){
print(i)
}
for (i in c(1:10)){
if(i%2==0){
print(i)
}
}
for(i in c(1:10)){
if(i%2==0){
print(i)
}
}
}
for(i in c(1:10)){
if(i==2):
print(i)
}
for(i in c(1:10)){
print(i)
}
for(i in c(1:10)){
if(i==2){
print(i)
}
}
for(i in c(1:10)){
if(i%2==0){
print(i)
}
}
if(i==0){
print(i)
}
for(i in c(1:10)){
if(i%2){
print(i)
}
}
mpg[1,]
mpg[,1]
mpg[,1]$name
mpg[,1][[1]]
mpg$name
names(mpg)
names(mpg)[1]
cor(mpg)
cor(USJudgeRatings)
cor(USJudgeRatings)-12
cor(USJudgeRatings)-diag(12)
cor_mcor(USJudgeRatings)-diag(12)
cor_m=cor(USJudgeRatings)-diag(12)
max(cor_m)
which(cor_m==max(cor_m))
media=mean(longley$Population)
t.test(media,mean_to_test)
t.test(media,5)
t.test(longley$Population,5)
2 |3
2 ||3
2 ||2
2 |2
runif(1,1,6)
floor(runif(1,1,6))
print(len(unique(unlist(mpg[4,]))))
print(lenght(unique(unlist(mpg[4,]))))
print(length(unique(unlist(mpg[4,]))))
mpg[4,]
mpg[,4]
print(length(unique(unlist(mpg[,4]))))
print(length(unique(unlist(mpg[,5]))))
seq(1,5*2,by=2)
summary(mpg$manufacturer)
summary(mpg$cyl)
library(eurostat)
kable(head(search_eurostat("Harmonised index of consumer")))
library(rvest)
library(knitr)
toc <- get_eurostat_toc()
> kable(head(toc))
kable(head(toc))
kable(head(search_eurostat("Harmonised index of consumer")))
dat <- get_eurostat("ei_cphi_m", time_format = "date")
View(dat)
countries=c("BE","BG","CZ","DK","DE","EE","IE","EL","ES","FR","HR","IT","CY","LV","LT","LU","HU","MT","NL","AT","PL","PT","RO","SI","SK","FI","SE")
datt = filter(dat, geo %in% countries & time > "2007-01-01")
library(tidyverse)
datt = filter(dat, geo %in% countries & time > "2007-01-01")
library(data.table)
stats <- data.table(data)
data_quantiles <- stats[, list( quant.0 = quantile(values, probs = 0, na.rm = TRUE, names = TRUE)[[1]], quant.25 = quantile(values, probs = 0.25, na.rm = TRUE, names = TRUE)[[1]], quant.50 = quantile(values, probs = 0.50, na.rm = TRUE, names = TRUE)[[1]], quant.75 = quantile(values, probs = 0.75, na.rm = TRUE, names = TRUE)[[1]], quant.100 = quantile(values, probs = 1, na.rm = TRUE, names = TRUE)[[1]]), by = list(time) ]
data_quantiles <- stats[,
list(
quant.0 = quantile(values, probs = 0, na.rm = TRUE, names = TRUE)[[1]],
quant.25 = quantile(values, probs = 0.25, na.rm = TRUE, names = TRUE)[[1]],
quant.50 = quantile(values, probs = 0.50, na.rm = TRUE, names = TRUE)[[1]],
quant.75 = quantile(values, probs = 0.75, na.rm = TRUE, names = TRUE)[[1]],
quant.100 = quantile(values, probs = 1, na.rm = TRUE, names = TRUE)[[1]]), by = list(time) ]
library(data.table)
stats <- data.table(data)
data_quantiles <- stats[,
list(
quant.0 = quantile(values, probs = 0, na.rm = TRUE, names = TRUE)[[1]],
quant.25 = quantile(values, probs = 0.25, na.rm = TRUE, names = TRUE)[[1]],
quant.50 = quantile(values, probs = 0.50, na.rm = TRUE, names = TRUE)[[1]],
quant.75 = quantile(values, probs = 0.75, na.rm = TRUE, names = TRUE)[[1]],
quant.100 = quantile(values, probs = 1, na.rm = TRUE, names = TRUE)[[1]]), by = list(time) ]
data_quantiles <- stats[, list( quant.0 = quantile(values, probs = 0, na.rm = TRUE, names = TRUE)[[1]], quant.25 = quantile(values, probs = 0.25, na.rm = TRUE, names = TRUE)[[1]], quant.50 = quantile(values, probs = 0.50, na.rm = TRUE, names = TRUE)[[1]], quant.75 = quantile(values, probs = 0.75, na.rm = TRUE, names = TRUE)[[1]], quant.100 = quantile(values, probs = 1, na.rm = TRUE, names = TRUE)[[1]]), by = list(time) ]
data_quantiles <- stats[, list( quant.0 = quantile(values, probs = 0, na.rm = TRUE, names = TRUE)[[1]], quant.25 = quantile(values, probs = 0.25, na.rm = TRUE, names = TRUE)[[1]], quant.50 = quantile(values, probs = 0.50, na.rm = TRUE, names = TRUE)[[1]], quant.75 = quantile(values, probs = 0.75, na.rm = TRUE, names = TRUE)[[1]], quant.100 = quantile(values, probs = 1, na.rm = TRUE, names = TRUE)[[1]]), by = list(time) ]
unique(datt$indic)
unique(datt$unit)
data= filter(datt, indic == "CP-HI00" & unit== "RT12")
library(data.table)
stats <- data.table(data)
data_quantiles <- stats[,
list( quant.0 = quantile(values, probs = 0, na.rm = TRUE, names = TRUE)[[1]], quant.25 = quantile(values, probs = 0.25, na.rm = TRUE, names = TRUE)[[1]], quant.50 = quantile(values, probs = 0.50, na.rm = TRUE, names = TRUE)[[1]], quant.75 = quantile(values, probs = 0.75, na.rm = TRUE, names = TRUE)[[1]], quant.100 = quantile(values, probs = 1, na.rm = TRUE, names = TRUE)[[1]]), by = list(time) ]
HICP <- ggplot(data = data_quantiles, aes(x = time)) + # sets data_quantiles as the dataset to use and the date as the x axis
geom_ribbon(aes(ymin = quant.0, ymax = quant.25, fill = '0% — 25%'), alpha=0.3) +
geom_ribbon(aes(ymin = quant.25, ymax = quant.50, fill = '25% — 50%'), alpha=0.3) +
geom_ribbon(aes(ymin = quant.50, ymax = quant.75, fill = '50% — 75%'), alpha=0.3) +
geom_ribbon(aes(ymin = quant.75, ymax = quant.100, fill = '75% — 100%'), alpha=0.3)+
HICP <- ggplot(data = data_quantiles, aes(x = time)) + # sets data_quantiles as the dataset to use and the date as the x axis
geom_ribbon(aes(ymin = quant.0, ymax = quant.25, fill = '0% — 25%'), alpha=0.3) +
geom_ribbon(aes(ymin = quant.25, ymax = quant.50, fill = '25% — 50%'), alpha=0.3) +
geom_ribbon(aes(ymin = quant.50, ymax = quant.75, fill = '50% — 75%'), alpha=0.3) +
geom_ribbon(aes(ymin = quant.75, ymax = quant.100, fill = '75% — 100%'), alpha=0.3)
HICP <- ggplot(data = data_quantiles, aes(x = time)) + # sets data_quantiles as the dataset to use and the date as the x axis
geom_ribbon(aes(ymin = quant.0, ymax = quant.25, fill = '0% — 25%'), alpha=0.3) +
geom_ribbon(aes(ymin = quant.25, ymax = quant.50, fill = '25% — 50%'), alpha=0.3) +
geom_ribbon(aes(ymin = quant.50, ymax = quant.75, fill = '50% — 75%'), alpha=0.3) +
geom_ribbon(aes(ymin = quant.75, ymax = quant.100, fill = '75% — 100%'), alpha=0.3)
HICP
HICP<-HICP+
geom_line(data = stats[geo == 'FR'], aes(x = time, y = values, fill='France'), size = 1, alpha=0.7, color="blue")+
geom_line(data = stats[geo == 'ES'], aes(x = time, y = values, fill='Spain'), size = 1, alpha=0.7, color="red")
HICP
HICP<-HICP+
# create a line for Spain and France in order to compare with the quantile distribution scale_fill_manual(values = c("#01A9DB", "#086A87", "#086A87", "#01A9DB", "blue","red"))+ # this is the X-axis line
geom_hline(aes(yintercept=0), colour="black",size=1, alpha=0.5)+
theme_bw()+theme(panel.grid.major=element_line(size=0.3, colour='grey92'))+
guides(fill=guide_legend(title=NULL))+ ylab("Annual % Change")+
theme(axis.title.x = element_blank(),panel.border = element_blank())+
ggtitle("HICP")+ theme(plot.title = element_text(hjust = 0.5))
HICP
HICP<-HICP+
# create a line for Spain and France in order to compare with the quantile distribution scale_fill_manual(values = c("#01A9DB", "#086A87", "#086A87", "#01A9DB", "blue","red"))+ # this is the X-axis line
geom_hline(aes(yintercept=0), colour="black",size=1, alpha=0.5)+
theme_bw()+theme(panel.grid.major=element_line(size=0.3, colour='grey92'))+
guides(fill=guide_legend(title=NULL))+ ylab("Annual % Change")+
theme(axis.title.x = element_blank(),panel.border = element_blank())+
ggtitle("HICP")+ theme(plot.title = element_text(hjust = 0.5))
HICP
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(ggplot2)
library(ggalluvial)
data(vaccinations)
levels(vaccinations$response) <- rev(levels(vaccinations$response))
ggplot(vaccinations,
aes(x = survey, stratum = response, alluvium = subject,
y = freq,
fill = response, label = response)) +
scale_x_discrete(expand = c(.1, .1)) +
geom_flow() +
geom_stratum(alpha = .5) +
geom_text(stat = "stratum", size = 3) +
theme(legend.position = "none") +
ggtitle("vaccination survey responses at three points in time")
data(vaccinations)
install.packages('plumber', dependencies=TRUE)
install.packages('readr', dependencies=TRUE)
install.packages('yaml', dependencies=TRUE)
install.packages('caret', dependencies=TRUE)
install.packages('ipred', dependencies=TRUE)
install.packages('swagger', dependencies=TRUE)
install.packages('rapidoc', dependencies=TRUE)
setwd("~/Documents/GitHub/Docker_plumber")
plumber::plumb(file='StrandedPlumberAPIHC.R')$run()
library(plumber)
options(warn=-1)
r <- plumber::plumb("StrandedPlumberAPIHC.R")
r$run(host="0.0.0.0",swagger=TRUE)
r <- plumb("StrandedPlumberAPIHC.R")
r <- plumb("StrandedPlumberAPIHC.R")
library(plumber)
library(xgboost)
library(logger)
library(tictoc)
#options(warn=-1)
r <- plumb("StrandedPlumberAPIHC.R")
convert_empty <- function(string){
if(string==""){
"-"
}
else{
string
}
}
r$registerHook(
list(
preroute=function(){
tictoc::tic()
},
postroute=function(req,res){
end<-tictoc::toc(quiet = TRUE)
}
)
)
r$run(port=88,host="0.0.0.0")
r$run(port=88,host="127.0.0.1")
r$run(port=808,host="127.0.0.1")
r$run(port=70,host="127.0.0.1")
r$run(port=70,host="127.0.0.1",getOption('plumber.apiHost', host))
r$run(port=70,host="127.0.0.1",getOption('plumber.apiHost', "127.0.0.1"))
library(plumber)
library(xgboost)
library(logger)
library(tictoc)
#options(warn=-1)
r <- plumb("StrandedPlumberAPIHC.R")
convert_empty <- function(string){
if(string==""){
"-"
}
else{
string
}
}
r$registerHook(
list(
preroute=function(){
tictoc::tic()
},
postroute=function(req,res){
end<-tictoc::toc(quiet = TRUE)
}
)
)
library(plumber)
library(xgboost)
library(logger)
library(tictoc)
r <- plumb("StrandedPlumberAPIHC.R")
convert_empty <- function(string){
if(string==""){
"-"
}
else{
string
}
}
r$registerHook(
list(
preroute=function(){
tictoc::tic()
},
postroute=function(req,res){
end<-tictoc::toc(quiet = TRUE)
}
)
)
r$run(port=70,host="127.0.0.1",getOption('plumber.apiHost', "127.0.0.1"))
r$run(port=70,host="127.0.0.1")
r$run(port=70,host="0.0.0.0")
r$run(port=87,host="0.0.0.0")
library(plumber)
library(xgboost)
library(logger)
library(tictoc)
#options(warn=-1)
r <- plumb("StrandedPlumberAPIHC.R")
convert_empty <- function(string){
if(string==""){
"-"
}
else{
string
}
}
r$registerHook(
list(
preroute=function(){
tictoc::tic()
},
postroute=function(req,res){
end<-tictoc::toc(quiet = TRUE)
}
)
)
r$run(port=87,host="0.0.0.0")
r$run(port=80,host="0.0.0.0")
r$run(port=80,host="127.0.0.1")
r$run(port=80,host="0.0.0.0")
library(plumber)
library(xgboost)
library(logger)
library(tictoc)
#options(warn=-1)
r <- plumb("StrandedPlumberAPIHC.R")
convert_empty <- function(string){
if(string==""){
"-"
}
else{
string
}
}
r$registerHook(
list(
preroute=function(){
tictoc::tic()
},
postroute=function(req,res){
end<-tictoc::toc(quiet = TRUE)
}
)
)
r$run(port=80,host="0.0.0.0")
r$run(port=80,host="0.0.0.0")
library(plumber)
library(xgboost)
library(logger)
library(tictoc)
#options(warn=-1)
r <- plumb("StrandedPlumberAPIHC.R")
convert_empty <- function(string){
if(string==""){
"-"
}
else{
string
}
}
r$run(port=80,host="0.0.0.0")
r$run(port=80,host="0.0.0.0")
library(plumber)
library(xgboost)
library(logger)
library(tictoc)
#options(warn=-1)
r <- plumb("StrandedPlumberAPIHC.R")
convert_empty <- function(string){
if(string==""){
"-"
}
else{
string
}
}
r$run(port=80,host="0.0.0.0")
library(plumber)
library(xgboost)
library(logger)
library(tictoc)
#options(warn=-1)
r <- plumb("StrandedPlumberAPIHC.R")
convert_empty <- function(string){
if(string==""){
"-"
}
else{
string
}
}
r$run(port=80,host="0.0.0.0")
plumb(file='StrandedPlumberAPIHC.R')$run()
library(plumber)
#options(warn=-1)
r <- plumb("StrandedPlumberAPIHC.R")
convert_empty <- function(string){
if(string==""){
"-"
}
else{
string
}
}
r$run(port=80,host="0.0.0.0")
library(plumber)
#options(warn=-1)
r <- plumb("StrandedPlumberAPIHC.R")
convert_empty <- function(string){
if(string==""){
"-"
}
else{
string
}
}
r$run(port=8080,host="0.0.0.0")
